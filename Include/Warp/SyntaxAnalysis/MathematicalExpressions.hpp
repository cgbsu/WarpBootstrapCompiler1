#include <Warp/SyntaxAnalysis/SyntaxTree.hpp>

/* This work is under the Copyright Christopher A. Greeley (2024) and it is distributed
* under the No Kill Do No Harm License, a legally non-binding sumemry is as follows: 
* 
* # No Kill Do No Harm Licence â€“ Summary
* 
* Based on version 0.3, July 2022 of the Do No Harm License
* 
* https://github.com/raisely/NoHarm
* 
* LEGALLY NON-BINDING SUMMARY OF THE TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
* 
* ## Licence Grants
* 
* You're allowed
* 
* - to distribute the licensed work,
* - to create, publish, sublicense and patent derivative works and
* - to put your modifications or your derivative work under a seperate licence,
* 
* free of charge. Though, filing patent litigation leads to the loss of the patent licence. Also, the licence grants don't include the right to use the licensor's trademarks.
* 
* ## Unethical Behaviour
* 
* You may not use the licensed work if you engage in:
* 
* - human rights violations,
* - environmental destruction,
* - warfare,
* - addictive/destructive products or services or
* - actions that frustrate:
*   * peace,
*   * access to human rights,
*   * peaceful assembly and association,
*   * a sustainable environment or
*   * democratic processes
*   * abortion
*   * euthanasia
*   * human embryonic stem cell research (if human organisms are killed in the process)
* - except for actions that may be contrary to "human rights" (or interpretations thereof), do not kill and that frustrate 
*   * abortion
*   * euthanasia
*   * killing
* and; the software must never be used to kill, including: abortion, euthanasia, human stem cell research, in war, or law enforcement or as a part of any lethal weapon
* 
* ## Contributions
* 
* Contributions to the licensed work must be licensed under the exact same licence.
* 
* ## Licence Notice
* 
* When distributing the licensed work or your derivative work, you must
* 
* - include a copy of this licence,
* - retain attribution notices,
* - state changes that you made and
* - not use the names of the author and the contributors to promote your derivative work.
* 
* If the licensed work includes a "NOTICE" text file with attribution notices, you must copy those notices to:
* 
* - a "NOTICE" file within your derivative work,
* - a place within the source code or the documentation or
* - a place within a display generated by your derivative work.
* 
* ## No Warranty or Liability
* 
* The licensed work is offered on an as-is basis without any warranty or liability. You may choose to offer warranty or liability for your derivative work, but only fully on your own responsibility. */


#ifndef WARP__PARSING__HEADER__SYNTAX__ANALYSIS__MATHEMATICAL__EXPRESSIONS__HPP
#define WARP__PARSING__HEADER__SYNTAX__ANALYSIS__MATHEMATICAL__EXPRESSIONS__HPP

namespace Warp::SyntaxAnalysis::SyntaxTree
{
	// Idea have the SyntaxNode type be incomplete inistead of the node type. //
	#define BINARY_NODE(OPERATION) \
			template<> \
			struct Node<NodeType:: OPERATION > : public BaseNode \
			{ \
				constexpr static const auto tag = NodeType:: OPERATION ; \
				SyntaxNode left, right; \
				constexpr Node() noexcept = default; \
				Node(const Node& other) noexcept = default; \
				Node(Node&& other) noexcept = default; \
				constexpr Node& operator=(const Node& other) noexcept = default; \
				Node& operator=(Node&& other) noexcept = default; \
				explicit Node(SyntaxNode left, SyntaxNode right) noexcept : left(std::move(left)), right(std::move(right)) {} \
				explicit Node(BaseNode* left, BaseNode* right) noexcept : left(left), right(right) {} \
				constexpr virtual BaseNode::ViewType to_view() const noexcept final { \
					return BaseNode::ViewType(this); \
				} \
				constexpr virtual NodeType get_tag() const noexcept final { \
					return tag; \
				} \
				operator SyntaxNode() const noexcept { \
					return SyntaxNode{*this}; \
				} \
			}
	BINARY_NODE(Multiply);
	BINARY_NODE(Divide);
	BINARY_NODE(Add);
	BINARY_NODE(Subtract);

	#undef BINARY_NODE

	template<>
	struct Node<NodeType::Negation> : public BaseNode
	{
		constexpr static const auto tag = NodeType::Negation;
		SyntaxNode negated;
		constexpr Node() noexcept = default; \
		Node(const Node& other) noexcept = default; \
		Node(Node&& other) noexcept = default; \
		Node(SyntaxNode negated) noexcept : negated(std::move(negated)) {} \
		Node& operator=(const Node& other) noexcept = default; \
		Node& operator=(Node&& other) noexcept = default; \
		constexpr virtual BaseNode::ViewType to_view() const noexcept final { \
			return BaseNode::ViewType{this}; \
		} \
		constexpr virtual NodeType get_tag() const noexcept final {
			return tag;
		}
		operator SyntaxNode() const noexcept {
			return SyntaxNode{*this};
		}
	};

	template<>
	struct Node<NodeType::Expression> : public BaseNode
	{
		constexpr static const auto tag = NodeType::Expression;
		SyntaxNode root;
		constexpr Node() noexcept = default; \
		Node(const Node& other) noexcept = default; \
		Node(Node&& other) noexcept = default; \
		Node(SyntaxNode root) noexcept : root(std::move(root)) {} \
		Node& operator=(const Node& other) noexcept = default; \
		Node& operator=(Node&& other) noexcept = default; \
		constexpr virtual BaseNode::ViewType to_view() const noexcept final {
			return BaseNode::ViewType{this};
		}
		constexpr virtual NodeType get_tag() const noexcept final {
			return tag;
		}
		operator SyntaxNode() const noexcept {
			return SyntaxNode{*this};
		}
	};

	extern template struct Node<NodeType::Multiply>;
	extern template struct Node<NodeType::Divide>;
	extern template struct Node<NodeType::Add>;
	extern template struct Node<NodeType::Subtract>;
	extern template struct Node<NodeType::Negation>;
	extern template struct Node<NodeType::Expression>;
}
namespace std
{
	using namespace Warp::SyntaxAnalysis::SyntaxTree;

	extern template class std::unique_ptr<Node<NodeType::Multiply>>;
	extern template class std::unique_ptr<Node<NodeType::Divide>>;
	extern template class std::unique_ptr<Node<NodeType::Add>>;
	extern template class std::unique_ptr<Node<NodeType::Subtract>>;
	extern template class std::unique_ptr<Node<NodeType::Negation>>;
	extern template class std::unique_ptr<Node<NodeType::Expression>>;

	extern template std::unique_ptr<Node<NodeType::Multiply>> std::make_unique<
			Node<NodeType::Multiply>
		>(decltype(std::move(std::declval<SyntaxNode>())), decltype(std::move(std::declval<SyntaxNode>())));
	extern template std::unique_ptr<Node<NodeType::Divide>> std::make_unique<
			Node<NodeType::Divide>
		>(decltype(std::move(std::declval<SyntaxNode>())), decltype(std::move(std::declval<SyntaxNode>())));
	extern template std::unique_ptr<Node<NodeType::Add>> std::make_unique<
			Node<NodeType::Add>
		>(decltype(std::move(std::declval<SyntaxNode>())), decltype(std::move(std::declval<SyntaxNode>())));
	extern template std::unique_ptr<Node<NodeType::Subtract>> std::make_unique<
			Node<NodeType::Subtract>
		>(decltype(std::move(std::declval<SyntaxNode>())), decltype(std::move(std::declval<SyntaxNode>())));
	extern template std::unique_ptr<Node<NodeType::Negation>> std::make_unique<
			Node<NodeType::Negation>
		>(decltype(std::move(std::declval<SyntaxNode>())));
	extern template std::unique_ptr<Node<NodeType::Expression>> std::make_unique<
			Node<NodeType::Expression>
		>(decltype(std::move(std::declval<SyntaxNode>())));
}

#endif // WARP__PARSING__HEADER__SYNTAX__ANALYSIS__MATHEMATICAL__EXPRESSIONS__HPP

