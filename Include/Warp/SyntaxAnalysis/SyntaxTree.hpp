#include <Warp/Common.hpp>
#include <Warp/Runtime/Compiler/NumericType.hpp>
#include <Warp/Utilities.hpp>
/* This work is under the Copyright Christopher A. Greeley (2024) and it is distributed
* under the No Kill Do No Harm License, a legally non-binding sumemry is as follows: 
* 
* # No Kill Do No Harm Licence â€“ Summary
* 
* Based on version 0.3, July 2022 of the Do No Harm License
* 
* https://github.com/raisely/NoHarm
* 
* LEGALLY NON-BINDING SUMMARY OF THE TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
* 
* ## Licence Grants
* 
* You're allowed
* 
* - to distribute the licensed work,
* - to create, publish, sublicense and patent derivative works and
* - to put your modifications or your derivative work under a seperate licence,
* 
* free of charge. Though, filing patent litigation leads to the loss of the patent licence. Also, the licence grants don't include the right to use the licensor's trademarks.
* 
* ## Unethical Behaviour
* 
* You may not use the licensed work if you engage in:
* 
* - human rights violations,
* - environmental destruction,
* - warfare,
* - addictive/destructive products or services or
* - actions that frustrate:
*   * peace,
*   * access to human rights,
*   * peaceful assembly and association,
*   * a sustainable environment or
*   * democratic processes
*   * abortion
*   * euthanasia
*   * human embryonic stem cell research (if human organisms are killed in the process)
* - except for actions that may be contrary to "human rights" (or interpretations thereof), do not kill and that frustrate 
*   * abortion
*   * euthanasia
*   * killing
* and; the software must never be used to kill, including: abortion, euthanasia, human stem cell research, in war, or law enforcement or as a part of any lethal weapon
* 
* ## Contributions
* 
* Contributions to the licensed work must be licensed under the exact same licence.
* 
* ## Licence Notice
* 
* When distributing the licensed work or your derivative work, you must
* 
* - include a copy of this licence,
* - retain attribution notices,
* - state changes that you made and
* - not use the names of the author and the contributors to promote your derivative work.
* 
* If the licensed work includes a "NOTICE" text file with attribution notices, you must copy those notices to:
* 
* - a "NOTICE" file within your derivative work,
* - a place within the source code or the documentation or
* - a place within a display generated by your derivative work.
* 
* ## No Warranty or Liability
* 
* The licensed work is offered on an as-is basis without any warranty or liability. You may choose to offer warranty or liability for your derivative work, but only fully on your own responsibility. */



#ifndef WARP__PARSING__HEADER__SYNTAX__ANALYSIS__SYNTAX__TREE__HPP
#define WARP__PARSING__HEADER__SYNTAX__ANALYSIS__SYNTAX__TREE__HPP

namespace Warp::SyntaxAnalysis::SyntaxTree
{
	using namespace Warp::Runtime::Compiler;
	using namespace Warp::Utilities;

	enum class NodeType
	{
		Multiply, 
		Divide, 
		Add, 
		Subtract, 
		Negation, 
		LiteralWhole, 
		LiteralInteger, 
		LiteralCharacter, 
		LiteralFixed, 
		LiteralBool, 
		Expression, 
		ConstantCall, 
		GreaterThan, 
		LessThan, 
		GreaterThanOrEqualTo, 
		LessThankOrEqualTo, 
		Equal, 
		LogicalAnd, 
		LogicalOr, 
		LogicalNot, 
		LogicalExpression
	};

	static std::string to_string(NodeType node_type)
	{
		using enum NodeType;
		switch(node_type)
		{
			case Multiply : {
				return "NodeType::Multiply";
			}
			case Divide : {
				return "NodeType::Divide";
			}
			case Add : {
				return "NodeType::Add";
			}
			case Subtract : {
				return "NodeType::Subtract";
			}
			case Negation : {
				return "NodeType::Negation";
			}
			case LiteralWhole : {
				return "NodeType::LiteralWhole";
			}
			case LiteralInteger : {
				return "NodeType::LiteralInteger";
			}
			case LiteralCharacter : {
				return "NodeType::LiteralCharacter";
			}
			case LiteralFixed : {
				return "NodeType::LiteralFixed";
			}
			case LiteralBool : {
				return "NodeType::LiteralBool";
			}
			case Expression : {
				return "NodeType::Expression";
			}
			case ConstantCall : {
				return "NodeType::ConstantCa";
			}
			case LessThan : {
				return "NodeType::LessThan";
			}
			case GreaterThan : {
				return "NodeType::GreaterThan";
			}
			case GreaterThanOrEqualTo : {
				return "NodeType::GreaterThanOrEqualTo";
			}
			case LessThankOrEqualTo : {
				return "NodeType::LessThankOrEqualTo";
			}
			case Equal : {
				return "NodeType::Equal";
			}
			case LogicalExpression : {
				return "NodeType::LogicalExpression";
			}
			case LogicalAnd : {
				return "NodeType::LogicalAnd";
			}
			case LogicalOr : {
				return "NodeType::LogicalOr";
			}
			case LogicalNot : {
				return "NodeType::LogicalNot";
			}
			default : {
				return "ERROR_NO_NODE_WITH_THIS_TAG!!!";
			}
		}
	}
	
	template<NodeType> struct Node {};

	struct BaseNode
	{
		using ViewType = VariantView<
				BaseNode, 
				Node, 
				NodeType::Multiply, 
				NodeType::Divide, 
				NodeType::Add, 
				NodeType::Subtract, 
				NodeType::Negation, 
				NodeType::LiteralWhole, 
				NodeType::LiteralInteger, 
				NodeType::LiteralCharacter, 
				NodeType::LiteralFixed, 
				NodeType::LiteralBool, 
				NodeType::Expression, 
				NodeType::ConstantCall, 
				NodeType::GreaterThan, 
				NodeType::LessThan, 
				NodeType::GreaterThanOrEqualTo, 
				NodeType::LessThankOrEqualTo, 
				NodeType::Equal, 
				NodeType::LogicalAnd, 
				NodeType::LogicalOr, 
				NodeType::LogicalNot, 
				NodeType::LogicalExpression
			>;
		constexpr virtual ViewType to_view() const noexcept = 0;
		constexpr virtual NodeType get_tag() const noexcept = 0;
		virtual ~BaseNode() = default;
	};

	using SyntaxNode = std::unique_ptr<BaseNode>;
}

#endif // WARP__PARSING__HEADER__SYNTAX__ANALYSIS__SYNTAX__TREE__HPP

