#include <Warp/Utilities/Conversions.hpp>
/* This work is under the Copyright Christopher A. Greeley (2024) and it is distributed
* under the No Kill Do No Harm License, a legally non-binding sumemry is as follows: 
* 
* # No Kill Do No Harm Licence â€“ Summary
* 
* Based on version 0.3, July 2022 of the Do No Harm License
* 
* https://github.com/raisely/NoHarm
* 
* LEGALLY NON-BINDING SUMMARY OF THE TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
* 
* ## Licence Grants
* 
* You're allowed
* 
* - to distribute the licensed work,
* - to create, publish, sublicense and patent derivative works and
* - to put your modifications or your derivative work under a seperate licence,
* 
* free of charge. Though, filing patent litigation leads to the loss of the patent licence. Also, the licence grants don't include the right to use the licensor's trademarks.
* 
* ## Unethical Behaviour
* 
* You may not use the licensed work if you engage in:
* 
* - human rights violations,
* - environmental destruction,
* - warfare,
* - addictive/destructive products or services or
* - actions that frustrate:
*   * peace,
*   * access to human rights,
*   * peaceful assembly and association,
*   * a sustainable environment or
*   * democratic processes
*   * abortion
*   * euthanasia
*   * human embryonic stem cell research (if human organisms are killed in the process)
* - except for actions that may be contrary to "human rights" (or interpretations thereof), do not kill and that frustrate 
*   * abortion
*   * euthanasia
*   * killing
* and; the software must never be used to kill, including: abortion, euthanasia, human stem cell research, in war, or law enforcement or as a part of any lethal weapon
* 
* ## Contributions
* 
* Contributions to the licensed work must be licensed under the exact same licence.
* 
* ## Licence Notice
* 
* When distributing the licensed work or your derivative work, you must
* 
* - include a copy of this licence,
* - retain attribution notices,
* - state changes that you made and
* - not use the names of the author and the contributors to promote your derivative work.
* 
* If the licensed work includes a "NOTICE" text file with attribution notices, you must copy those notices to:
* 
* - a "NOTICE" file within your derivative work,
* - a place within the source code or the documentation or
* - a place within a display generated by your derivative work.
* 
* ## No Warranty or Liability
* 
* The licensed work is offered on an as-is basis without any warranty or liability. You may choose to offer warranty or liability for your derivative work, but only fully on your own responsibility. */



#ifndef WARP__UTILITIES__HEADER__UTILITIES__LOGGING__HPP
#define WARP__UTILITIES__HEADER__UTILITIES__LOGGING__HPP
namespace Warp::Utilities
{
	enum class LogType
	{
		Debug, 
		Error, 
		Warning, 
		Note
	};


	namespace Detail
	{
		template<LogType = LogType::Debug>
		const char enum_string[] = "Debug";
		template<>
		const char enum_string<LogType::Error>[] = "Error";
		template<>
		const char enum_string<LogType::Warning>[] = "Warning";
		template<>
		const char enum_string<LogType::Note>[] = "Note";
		
		template<
				auto LogTypeParameterConstant, 
				bool LogFunctionSignitureParameterConstant = true, 
				bool LogSourceLocationParameterConstant = false, 
				bool EnableDebuggingParameterConstant
			>
		void log(
				auto& log, 
				std::source_location location = std::source_location::current(), 
				auto... to_log
			)
		{
			if constexpr((LogTypeParameterConstant == LogType::Debug 
					&& EnableDebuggingParameterConstant == true)
					|| LogTypeParameterConstant != LogType::Debug)
			{
				log << enum_string<LogTypeParameterConstant> << "::";
				if constexpr(LogSourceLocationParameterConstant == true)
				{
					log << location.file_name() 
						<< "[" << location.line() << "]" 
						<< "[" << location.column() << "]";
				}
				if constexpr(LogFunctionSignitureParameterConstant == true)
					log << location.function_name() << ": ";
				(log << ... << to_log); 
				log << "\n";
			}
		}
	}
	template<
			auto LogTypeParameterConstant, 
			bool LogFunctionSignitureParameterConstant = true, 
			bool LogSourceLocationParameterConstant = false, 
			bool EnableDebuggingParameterConstant = Warp::Utilities::Detail::debug
		>
	struct Log
	{
		Log(std::source_location location = std::source_location::current()) 
				: location(location) {}

		void operator[](auto& log, auto... to_log)
		{
			Warp::Utilities::Detail::log<
					LogTypeParameterConstant, 
					LogFunctionSignitureParameterConstant, 
					LogSourceLocationParameterConstant, 
					EnableDebuggingParameterConstant
				>(log, location, to_log... );
		}

		protected: 
			std::source_location location;
	};
}
#endif // WARP__UTILITIES__HEADER__UTILITIES__LOGGING__HPP

