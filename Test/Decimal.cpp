#include <Warp/Utilities/Decimal.hpp>
#include <CppUTest/TestHarness.h>
/* This work is under the Copyright Christopher A. Greeley (2024) and it is distributed
* under the No Kill Do No Harm License, a legally non-binding sumemry is as follows: 
* 
* # No Kill Do No Harm Licence â€“ Summary
* 
* Based on version 0.3, July 2022 of the Do No Harm License
* 
* https://github.com/raisely/NoHarm
* 
* LEGALLY NON-BINDING SUMMARY OF THE TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
* 
* ## Licence Grants
* 
* You're allowed
* 
* - to distribute the licensed work,
* - to create, publish, sublicense and patent derivative works and
* - to put your modifications or your derivative work under a seperate licence,
* 
* free of charge. Though, filing patent litigation leads to the loss of the patent licence. Also, the licence grants don't include the right to use the licensor's trademarks.
* 
* ## Unethical Behaviour
* 
* You may not use the licensed work if you engage in:
* 
* - human rights violations,
* - environmental destruction,
* - warfare,
* - addictive/destructive products or services or
* - actions that frustrate:
*   * peace,
*   * access to human rights,
*   * peaceful assembly and association,
*   * a sustainable environment or
*   * democratic processes
*   * abortion
*   * euthanasia
*   * human embryonic stem cell research (if human organisms are killed in the process)
* - except for actions that may be contrary to "human rights" (or interpretations thereof), do not kill and that frustrate 
*   * abortion
*   * euthanasia
*   * killing
* and; the software must never be used to kill, including: abortion, euthanasia, human stem cell research, in war, or law enforcement or as a part of any lethal weapon
* 
* ## Contributions
* 
* Contributions to the licensed work must be licensed under the exact same licence.
* 
* ## Licence Notice
* 
* When distributing the licensed work or your derivative work, you must
* 
* - include a copy of this licence,
* - retain attribution notices,
* - state changes that you made and
* - not use the names of the author and the contributors to promote your derivative work.
* 
* If the licensed work includes a "NOTICE" text file with attribution notices, you must copy those notices to:
* 
* - a "NOTICE" file within your derivative work,
* - a place within the source code or the documentation or
* - a place within a display generated by your derivative work.
* 
* ## No Warranty or Liability
* 
* The licensed work is offered on an as-is basis without any warranty or liability. You may choose to offer warranty or liability for your derivative work, but only fully on your own responsibility. */



using namespace Warp::Utilities;

TEST_GROUP(DecimalNumbers)
{
};

TEST(DecimalNumbers, RawValueComparison)
{
	CHECK((DefaultDecimalType{1} == DefaultDecimalType{1}));
	CHECK((DefaultDecimalType{1, 2} == DefaultDecimalType{1, 2}));
	CHECK((DefaultDecimalType{12, 2} != DefaultDecimalType{13, 2}));
	CHECK((DefaultDecimalType{12, 2} < DefaultDecimalType{13, 2}));
	CHECK((DefaultDecimalType{12, 2} > DefaultDecimalType{13, 2, Polarity::Negative}));
	CHECK((DefaultDecimalType{34324, 10} > DefaultDecimalType{9999999999, 2, Polarity::Negative}));
	CHECK((DefaultDecimalType{12, -2} < DefaultDecimalType{13, 2}));
	CHECK((DefaultDecimalType{12, -2} < DefaultDecimalType{13, 0}));
	CHECK((DefaultDecimalType{10, 1} > DefaultDecimalType{10, 1, Polarity::Positive, 2})); // There are 10 kinds of people in this world... </joke>
};

TEST(DecimalNumbers, Multiplication)
{
	CHECK(((DefaultDecimalType{2} * DefaultDecimalType{2}) == DefaultDecimalType{4}));
	CHECK(((DefaultDecimalType{42, -1} * DefaultDecimalType{2}) == DefaultDecimalType{84, -1}));
	CHECK(((DefaultDecimalType{123456789, -5} * DefaultDecimalType{123456789})
				== DefaultDecimalType{15241578750190521, -5}));
	CHECK(((DefaultDecimalType{123456789, -5} * DefaultDecimalType{3058172, -6})
				== DefaultDecimalType{377552095329708, -11}));
};

TEST(DecimalNumbers, Division)
{
	CHECK(((DefaultDecimalType{2} / DefaultDecimalType{2}) == DefaultDecimalType{1}));
	CHECK(((DefaultDecimalType{42, -1} / DefaultDecimalType{2}) == DefaultDecimalType{21, -1}));
	CHECK(((DefaultDecimalType{123456789, -5} / DefaultDecimalType{123456789})
				== DefaultDecimalType{1, -5}));
	CHECK(((DefaultDecimalType{123456789, -5} / DefaultDecimalType{3058172, -6})
				== DefaultDecimalType{4036947202446, -10}));
	CHECK(((DefaultDecimalType{123, -2} / DefaultDecimalType{456, -6})
				== DefaultDecimalType{26973684210526315, -13}));
};

//TEST(DecimalNumbers, MultipleHighPrecisionOperations)
//{
//	//const auto result = (DefaultDecimalType{123456789, -5} / DefaultDecimalType{3058172, -6}) 
//	//		* DefaultDecimalType{63246745724, -6};
//	//std::cout << result << "\n";
//	const auto result = (DefaultDecimalType{123456789, -5} 
//			/ DefaultDecimalType{3058172, -6}) 
//			/ DefaultDecimalType{3058172, -6};
//	std::cout << result << "\n";
//}


